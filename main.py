import os
import logging
import subprocess
import time
import telebot
import psutil
import pyautogui
import tempfile
import winreg
import getpass
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from win10toast import ToastNotifier
import config

bot = telebot.TeleBot(config.TOKEN)
logger = telebot.logger
logger.setLevel(logging.INFO)
toaster = ToastNotifier()

user_state = {
    "process_page": 0,
    "selected_process": None,
    "waiting_for_path": None,
    "upload_path": None,
    "show_system_processes": False,
    "autostart_enabled": False
}


def log_command(command, output):
    timestamp = time.strftime("%Y-%m-%d %H:%M:%S")
    with open("command_log.txt", "a", encoding="utf-8") as f:
        f.write(f"[{timestamp}] Command: {command}\n")
        f.write(f"Output: {output}\n\n")


def show_notification(command):
    toaster.show_toast("Telegram Bot Command", f"Executed command:\n{command}", duration=5, threaded=True)


def create_main_menu():
    keyboard = InlineKeyboardMarkup(row_width=2)
    buttons = [
        InlineKeyboardButton("üñ•Ô∏è –í—ã–∫–ª—é—á–∏—Ç—å –ü–ö", callback_data="shutdown"),
        InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ü–ö", callback_data="reboot"),
        InlineKeyboardButton("üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç", callback_data="screenshot"),
        InlineKeyboardButton("üìÅ –ò–∑–≤–ª–µ—á—å —Ñ–∞–π–ª", callback_data="get_file"),
        InlineKeyboardButton("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª", callback_data="upload_file"),
        InlineKeyboardButton("üìÇ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–∞–ø–∫–∏", callback_data="list_dir"),
        InlineKeyboardButton("‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å", callback_data="kill_menu"),
        InlineKeyboardButton("üìù –õ–æ–≥ –∫–æ–º–∞–Ω–¥", callback_data="log"),
        InlineKeyboardButton("üöÄ –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫", callback_data="autostart_menu"),
        InlineKeyboardButton("‚ÑπÔ∏è CMD –∫–æ–º–∞–Ω–¥—ã", callback_data="cmdlist"),
        InlineKeyboardButton("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"),
        InlineKeyboardButton("üõë –í—ã—Ö–æ–¥", callback_data="exit")
    ]
    keyboard.add(*buttons)
    return keyboard


def create_process_keyboard(page=0, show_system=False):
    keyboard = InlineKeyboardMarkup()
    processes = []
    for proc in psutil.process_iter(['pid', 'name']):
        try:
            if not show_system and proc.pid < 1000:
                continue
            processes.append((proc.pid, proc.name()))
        except:
            pass

    if not processes:
        keyboard.add(InlineKeyboardButton("‚ùå –ü—Ä–æ—Ü–µ—Å—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", callback_data="noop"))
        keyboard.add(InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
        return keyboard

    total_pages = (len(processes) // 5 + (1 if len(processes) % 5 > 0 else 0))
    start_index = page * 5
    end_index = start_index + 5
    current_page = processes[start_index:end_index]

    for pid, name in current_page:
        keyboard.add(InlineKeyboardButton(f"{name} (PID: {pid})", callback_data=f"select_{pid}"))

    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"proc_page_{page - 1}"))
    if end_index < len(processes):
        nav_buttons.append(InlineKeyboardButton("‚ñ∂Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f"proc_page_{page + 1}"))

    if nav_buttons:
        keyboard.add(*nav_buttons)

    keyboard.add(InlineKeyboardButton(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{total_pages}", callback_data="noop"))

    system_text = "‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–µ" if show_system else "‚ùå –°–∏—Å—Ç–µ–º–Ω—ã–µ"
    keyboard.add(InlineKeyboardButton(f"{system_text} –ø—Ä–æ—Ü–µ—Å—Å—ã", callback_data="toggle_system"))

    keyboard.add(InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
    return keyboard


def create_confirmation_keyboard():
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton("‚úÖ –î–∞, –∑–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="kill_confirm"),
        InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="kill_cancel")
    )
    return keyboard


def create_exit_keyboard():
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton("‚úÖ –î–∞", callback_data="shutdown_confirm"),
        InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="shutdown_cancel")
    )
    return keyboard


def create_reboot_keyboard():
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton("‚úÖ –î–∞", callback_data="reboot_confirm"),
        InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="reboot_cancel")
    )
    return keyboard


def create_autostart_keyboard():
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton("‚úÖ –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫", callback_data="autostart_enable"),
        InlineKeyboardButton("‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫", callback_data="autostart_disable"),
        InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    )
    return keyboard


def take_screenshot():
    screenshot = pyautogui.screenshot()
    temp_file = tempfile.NamedTemporaryFile(suffix='.png', delete=False)
    screenshot.save(temp_file.name)
    return temp_file.name


def list_directory(path):
    try:
        if not os.path.exists(path):
            return "‚ùå –ü—É—Ç—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        if not os.path.isdir(path):
            return "‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–∞–ø–∫–æ–π"
        result = "üìÇ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏:\n\n"
        for item in os.listdir(path):
            full_path = os.path.join(path, item)
            if os.path.isdir(full_path):
                result += f"üìÅ {item}/\n"
            else:
                size = os.path.getsize(full_path)
                result += f"üìÑ {item} ({size // 1024} KB)\n"
        return result
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"


def enable_autostart():
    try:
        script_path = os.path.abspath(__file__)
        bat_path = os.path.join(os.path.dirname(script_path), "start.bat")

        with open(bat_path, "w") as bat_file:
            bat_file.write(f'@echo off\n')
            bat_file.write(f'cd /d "{os.path.dirname(script_path)}"\n')
            bat_file.write(f'python "{script_path}"\n')

        username = getpass.getuser()
        task_name = "TelegramBotAutoStart"
        cmd = f'schtasks /create /tn "{task_name}" /tr "{bat_path}" /sc onlogon /ru {username} /f'
        subprocess.run(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        return True
    except Exception as e:
        print(f"Error enabling autostart: {e}")
        return False


def disable_autostart():
    try:
        task_name = "TelegramBotAutoStart"
        cmd = f'schtasks /delete /tn "{task_name}" /f'
        subprocess.run(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

        script_path = os.path.abspath(__file__)
        bat_path = os.path.join(os.path.dirname(script_path), "start.bat")
        if os.path.exists(bat_path):
            os.remove(bat_path)
        return True
    except Exception as e:
        print(f"Error disabling autostart: {e}")
        return False


def check_autostart():
    try:
        task_name = "TelegramBotAutoStart"
        cmd = f'schtasks /query /tn "{task_name}"'
        result = subprocess.run(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        return result.returncode == 0
    except:
        return False


@bot.message_handler(func=lambda message: message.chat.id != config.CHAT_ID)
def handle_unauthorized(message):
    bot.reply_to(message, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")


@bot.message_handler(commands=['start', 'help', 'menu'])
def send_welcome(message):
    if message.chat.id != config.CHAT_ID:
        return
    help_text = (
        "ü§ñ –ë–æ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/cmd [–∫–æ–º–∞–Ω–¥–∞] - –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ CMD\n"
        "/cmdlist - –°–ø–∏—Å–æ–∫ –ø–æ–ª–µ–∑–Ω—ã—Ö CMD –∫–æ–º–∞–Ω–¥\n"
        "/kill - –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å\n"
        "/log - –ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥ –∫–æ–º–∞–Ω–¥\n"
        "/autostart - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–æ–º\n\n"
        "‚ö†Ô∏è –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ —Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
    )
    bot.send_message(message.chat.id, help_text, reply_markup=create_main_menu())


@bot.message_handler(commands=['control'])
def show_control_menu(message):
    if message.chat.id != config.CHAT_ID:
        return
    bot.send_message(message.chat.id, "üì± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", reply_markup=create_main_menu())


@bot.message_handler(commands=['kill'])
def show_kill_menu(message):
    if message.chat.id != config.CHAT_ID:
        return
    user_state["process_page"] = 0
    bot.send_message(message.chat.id, "üõë –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:",
                     reply_markup=create_process_keyboard(0, user_state["show_system_processes"]))


@bot.message_handler(commands=['log'])
def send_log(message):
    if message.chat.id != config.CHAT_ID:
        return
    try:
        with open("command_log.txt", "rb") as f:
            bot.send_document(message.chat.id, f, caption="üìù –õ–æ–≥ –∫–æ–º–∞–Ω–¥")
    except Exception as e:
        bot.reply_to(message, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")


@bot.message_handler(commands=['cmd'])
def handle_cmd_command(message):
    if message.chat.id != config.CHAT_ID:
        return
    command = message.text.replace('/cmd', '', 1).strip()
    if not command:
        bot.reply_to(message, "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /cmd [–∫–æ–º–∞–Ω–¥–∞]")
        return
    show_notification(f"CMD: {command}")
    try:
        result = subprocess.run(
            command,
            shell=True,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            timeout=60,
            encoding='cp866'
        )
        output = result.stdout or result.stderr or "–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"
        log_command(command, output)

        if len(output) > 4000:
            with open("output.txt", "w", encoding="utf-8") as f:
                f.write(output)
            with open("output.txt", "rb") as f:
                bot.send_document(message.chat.id, f)
            os.remove("output.txt")
        else:
            bot.reply_to(message, f"```\n{output}\n```", parse_mode="Markdown")
    except Exception as e:
        log_command(command, f"Error: {str(e)}")
        bot.reply_to(message, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")


@bot.message_handler(commands=['cmdlist'])
def cmd_list(message):
    if message.chat.id != config.CHAT_ID:
        return

    cmd_help = (
        "üìã –û—Å–Ω–æ–≤–Ω—ã–µ CMD –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "‚Ä¢ `cd` - –°–º–µ–Ω–∏—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é\n"
        "‚Ä¢ `dir` - –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏\n"
        "‚Ä¢ `ipconfig` - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ç–µ–≤—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è—Ö\n"
        "‚Ä¢ `ping` - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ö–æ—Å—Ç–∞\n"
        "‚Ä¢ `shutdown /s /t 0` - –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ\n"
        "‚Ä¢ `shutdown /r /t 0` - –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞\n"
        "‚Ä¢ `tasklist` - –°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤\n"
        "‚Ä¢ `taskkill /F /PID <pid>` - –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å\n"
        "‚Ä¢ `systeminfo` - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ\n"
        "‚Ä¢ `curl` - –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞\n"
        "‚Ä¢ `netsh wlan show profiles` - –ü–æ–∫–∞–∑–∞—Ç—å Wi-Fi —Å–µ—Ç–∏\n"
        "‚Ä¢ `netsh wlan show profile name=\"NETWORK\" key=clear` - –ü–æ–∫–∞–∑–∞—Ç—å –ø–∞—Ä–æ–ª—å Wi-Fi\n\n"
        "–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cmd [–∫–æ–º–∞–Ω–¥–∞]"
    )
    bot.send_message(message.chat.id, cmd_help, parse_mode="Markdown")


@bot.message_handler(
    func=lambda message: user_state.get("waiting_for_path") and message.chat.id == config.CHAT_ID and user_state[
        "waiting_for_path"] != "upload_file")
def handle_path_input(message):
    path = message.text.strip()
    action = user_state["waiting_for_path"]
    user_state["waiting_for_path"] = None

    if action == "get_file":
        try:
            if not os.path.exists(path):
                bot.reply_to(message, "‚ùå –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            elif os.path.isdir(path):
                bot.reply_to(message, "‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å —è–≤–ª—è–µ—Ç—Å—è –ø–∞–ø–∫–æ–π, –∞ –Ω–µ —Ñ–∞–π–ª–æ–º")
            else:
                with open(path, 'rb') as f:
                    bot.send_document(message.chat.id, f, caption=f"üìÑ {os.path.basename(path)}")
        except Exception as e:
            bot.reply_to(message, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")
        finally:
            bot.send_message(message.chat.id, "üì± –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=create_main_menu())
    elif action == "list_dir":
        result = list_directory(path)
        if len(result) > 4000:
            with open("dir_list.txt", "w", encoding="utf-8") as f:
                f.write(result)
            with open("dir_list.txt", "rb") as f:
                bot.send_document(message.chat.id, f)
            os.remove("dir_list.txt")
        else:
            bot.reply_to(message, result)
        bot.send_message(message.chat.id, "üì± –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=create_main_menu())
    elif action == "upload_file":
        user_state["upload_path"] = path
        bot.reply_to(message, "üì§ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")


@bot.message_handler(content_types=['document'],
                     func=lambda message: message.chat.id == config.CHAT_ID and user_state.get("upload_path"))
def handle_file_upload(message):
    try:
        file_info = bot.get_file(message.document.file_id)
        downloaded_file = bot.download_file(file_info.file_path)

        directory = os.path.dirname(user_state["upload_path"])
        if directory and not os.path.exists(directory):
            os.makedirs(directory)

        with open(user_state["upload_path"], 'wb') as new_file:
            new_file.write(downloaded_file)

        bot.reply_to(message, f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –ø–æ –ø—É—Ç–∏:\n{user_state['upload_path']}")
        log_command("File Upload", f"Uploaded to: {user_state['upload_path']}")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")
        log_command("File Upload Error", str(e))
    finally:
        user_state["upload_path"] = None
        bot.send_message(message.chat.id, "üì± –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=create_main_menu())


@bot.callback_query_handler(func=lambda call: call.message.chat.id != config.CHAT_ID)
def handle_unauthorized_callback(call):
    bot.answer_callback_query(call.id, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")


@bot.callback_query_handler(func=lambda call: call.message.chat.id == config.CHAT_ID)
def handle_control_buttons(call):
    bot.answer_callback_query(call.id)
    action = call.data
    if action == "main_menu":
        bot.edit_message_text("üì± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", call.message.chat.id, call.message.message_id,
                              reply_markup=create_main_menu())
    elif action == "shutdown":
        bot.edit_message_text("‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–∫–ª—é—á–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä?", call.message.chat.id,
                              call.message.message_id, reply_markup=create_exit_keyboard())
    elif action == "shutdown_confirm":
        bot.edit_message_text("üñ•Ô∏è –ö–æ–º–ø—å—é—Ç–µ—Ä –±—É–¥–µ—Ç –≤—ã–∫–ª—é—á–µ–Ω —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É!", call.message.chat.id,
                              call.message.message_id)
        log_command("System Shutdown", "Initiated by bot")
        os.system("shutdown /s /t 60")
    elif action == "shutdown_cancel":
        bot.edit_message_text("‚ùå –í—ã–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", call.message.chat.id, call.message.message_id,
                              reply_markup=create_main_menu())
    elif action == "reboot":
        bot.edit_message_text("‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä?", call.message.chat.id,
                              call.message.message_id, reply_markup=create_reboot_keyboard())
    elif action == "reboot_confirm":
        bot.edit_message_text("üñ•Ô∏è –ö–æ–º–ø—å—é—Ç–µ—Ä –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É!", call.message.chat.id,
                              call.message.message_id)
        log_command("System Reboot", "Initiated by bot")
        os.system("shutdown /r /t 60")
    elif action == "reboot_cancel":
        bot.edit_message_text("‚ùå –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", call.message.chat.id, call.message.message_id,
                              reply_markup=create_main_menu())
    elif action == "screenshot":
        try:
            screenshot_path = take_screenshot()
            with open(screenshot_path, 'rb') as photo:
                bot.send_photo(call.message.chat.id, photo)
            os.unlink(screenshot_path)
            log_command("Screenshot", "Taken")
        except Exception as e:
            bot.answer_callback_query(call.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    elif action == "get_file":
        bot.edit_message_text("üì§ –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É:", call.message.chat.id, call.message.message_id)
        user_state["waiting_for_path"] = "get_file"
    elif action == "list_dir":
        bot.edit_message_text("üìÇ –í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ:", call.message.chat.id, call.message.message_id)
        user_state["waiting_for_path"] = "list_dir"
    elif action == "upload_file":
        bot.edit_message_text("üì§ –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞:", call.message.chat.id,
                              call.message.message_id)
        user_state["waiting_for_path"] = "upload_file"
    elif action == "log":
        try:
            with open("command_log.txt", "rb") as f:
                bot.send_document(call.message.chat.id, f, caption="üìù –õ–æ–≥ –∫–æ–º–∞–Ω–¥")
        except Exception as e:
            bot.answer_callback_query(call.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")
    elif action == "kill_menu":
        user_state["process_page"] = 0
        bot.edit_message_text("üõë –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:", call.message.chat.id, call.message.message_id,
                              reply_markup=create_process_keyboard(0, user_state["show_system_processes"]))
    elif action == "toggle_system":
        user_state["show_system_processes"] = not user_state["show_system_processes"]
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id,
                                      reply_markup=create_process_keyboard(user_state["process_page"],
                                                                           user_state["show_system_processes"]))
    elif action.startswith("proc_page_"):
        page = int(action.split("_")[2])
        user_state["process_page"] = page
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id,
                                      reply_markup=create_process_keyboard(page, user_state["show_system_processes"]))
    elif action.startswith("select_"):
        pid = int(action.split("_")[1])
        try:
            process = psutil.Process(pid)
            user_state["selected_process"] = pid
            bot.edit_message_text(
                f"‚ö†Ô∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å?\n\n–ò–º—è: {process.name()}\nPID: {pid}\n–°—Ç–∞—Ç—É—Å: {process.status()}",
                call.message.chat.id, call.message.message_id, reply_markup=create_confirmation_keyboard())
        except psutil.NoSuchProcess:
            bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ—Ü–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    elif action == "kill_confirm":
        if user_state["selected_process"]:
            try:
                p = psutil.Process(user_state["selected_process"])
                p.terminate()
                bot.edit_message_text(f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å {p.name()} (PID: {user_state['selected_process']}) –∑–∞–≤–µ—Ä—à–µ–Ω",
                                      call.message.chat.id, call.message.message_id, reply_markup=create_main_menu())
                log_command("Kill Process", f"Terminated {p.name()} (PID: {user_state['selected_process']})")
            except Exception as e:
                bot.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞: {str(e)}", call.message.chat.id,
                                      call.message.message_id, reply_markup=create_main_menu())
            finally:
                user_state["selected_process"] = None
    elif action == "kill_cancel":
        user_state["selected_process"] = None
        bot.edit_message_text("‚ùå –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", call.message.chat.id, call.message.message_id,
                              reply_markup=create_main_menu())
    elif action == "autostart_menu":
        status = "‚úÖ –í–∫–ª—é—á–µ–Ω" if check_autostart() else "‚ùå –í—ã–∫–ª—é—á–µ–Ω"
        bot.edit_message_text(f"üöÄ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–æ–º\n\n–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {status}", call.message.chat.id,
                              call.message.message_id, reply_markup=create_autostart_keyboard())
    elif action == "autostart_enable":
        if enable_autostart():
            bot.answer_callback_query(call.id, "‚úÖ –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –≤–∫–ª—é—á–µ–Ω")
            bot.edit_message_text("üöÄ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–æ–º\n\n–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ‚úÖ –í–∫–ª—é—á–µ–Ω", call.message.chat.id,
                                  call.message.message_id, reply_markup=create_autostart_keyboard())
        else:
            bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞")
    elif action == "autostart_disable":
        if disable_autostart():
            bot.answer_callback_query(call.id, "‚úÖ –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –æ—Ç–∫–ª—é—á–µ–Ω")
            bot.edit_message_text("üöÄ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–æ–º\n\n–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ‚ùå –í—ã–∫–ª—é—á–µ–Ω", call.message.chat.id,
                                  call.message.message_id, reply_markup=create_autostart_keyboard())
        else:
            bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞")
    elif action == "cmdlist":
        cmd_help = (
            "üìã –û—Å–Ω–æ–≤–Ω—ã–µ CMD –∫–æ–º–∞–Ω–¥—ã:\n\n"
            "‚Ä¢ `cd` - –°–º–µ–Ω–∏—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é\n"
            "‚Ä¢ `dir` - –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏\n"
            "‚Ä¢ `ipconfig` - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ç–µ–≤—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è—Ö\n"
            "‚Ä¢ `ping` - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ö–æ—Å—Ç–∞\n"
            "‚Ä¢ `shutdown /s /t 0` - –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ\n"
            "‚Ä¢ `shutdown /r /t 0` - –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞\n"
            "‚Ä¢ `tasklist` - –°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤\n"
            "‚Ä¢ `taskkill /F /PID <pid>` - –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å\n"
            "‚Ä¢ `systeminfo` - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ\n"
            "‚Ä¢ `curl` - –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞\n"
            "‚Ä¢ `netsh wlan show profiles` - –ü–æ–∫–∞–∑–∞—Ç—å Wi-Fi —Å–µ—Ç–∏\n"
            "‚Ä¢ `netsh wlan show profile name=\"NETWORK\" key=clear` - –ü–æ–∫–∞–∑–∞—Ç—å –ø–∞—Ä–æ–ª—å Wi-Fi\n\n"
            "–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cmd [–∫–æ–º–∞–Ω–¥–∞]"
        )
        bot.send_message(call.message.chat.id, cmd_help, parse_mode="Markdown")
    elif action == "exit":
        bot.edit_message_text("üëã –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É. –î–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start", call.message.chat.id,
                              call.message.message_id)


if __name__ == "__main__":
    user_state["autostart_enabled"] = check_autostart()

    if not os.path.exists("command_log.txt"):
        open("command_log.txt", 'w').close()

    print("=" * 50)
    print("Windows Telegram Control Bot")
    print("=" * 50)
    print(f"–¢–æ–∫–µ–Ω: {config.TOKEN}")
    print(f"Chat ID: {config.CHAT_ID}")
    print(f"–ê–≤—Ç–æ–∑–∞–ø—É—Å–∫: {'‚úÖ –í–∫–ª—é—á–µ–Ω' if user_state['autostart_enabled'] else '‚ùå –í—ã–∫–ª—é—á–µ–Ω'}")
    print("\n–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    print("–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")

    try:
        bot.infinity_polling()
    except Exception as e:
        print(f"\n–û—à–∏–±–∫–∞: {str(e)}")
        print("–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç")